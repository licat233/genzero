// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	adminerFieldNames          = builder.RawFieldNames(&Adminer{})
	adminerRows                = strings.Join(adminerFieldNames, ",")
	adminerRowsExpectAutoSet   = strings.Join(stringx.Remove(adminerFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	adminerRowsWithPlaceHolder = strings.Join(stringx.Remove(adminerFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheAdminerIdPrefix = "cache:adminer:id:"
)

type (
	adminerModel interface {
		Insert(ctx context.Context, data *Adminer) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Adminer, error)
		Update(ctx context.Context, data *Adminer) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAdminerModel struct {
		sqlc.CachedConn
		table string
	}

	Adminer struct {
		Id           int64     `db:"id"`             // 表主键
		Uuid         string    `db:"uuid"`           // UUID
		Name         string    `db:"name"`           // 管理员名称
		Avatar       string    `db:"avatar"`         // 头像
		Access       string    `db:"access"`         // 身份
		Passport     string    `db:"passport"`       // 账号
		Password     string    `db:"password"`       // 密码
		Email        string    `db:"email"`          // 邮箱
		Status       int64     `db:"status"`         // 账号状态，是否可用
		IsSuperAdmin int64     `db:"is_super_admin"` // 是否为超级管理员
		CompanyId    int64     `db:"company_id"`     // 公司id
		ProjectId    int64     `db:"project_id"`     // 项目id
		LoginCount   int64     `db:"login_count"`    // 登录次数
		LastLoginAt  time.Time `db:"last_login_at"`  // 最后一次登录时间
		CreateAt     time.Time `db:"create_at"`      // 创建时间
		UpdateAt     time.Time `db:"update_at"`      // 更新时间
		IsDeleted    int64     `db:"is_deleted"`     // 是否已删除
	}
)

func newAdminerModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultAdminerModel {
	return &defaultAdminerModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`adminer`",
	}
}

func (m *defaultAdminerModel) withSession(session sqlx.Session) *defaultAdminerModel {
	return &defaultAdminerModel{
		CachedConn: m.CachedConn.WithSession(session),
		table:      "`adminer`",
	}
}

func (m *defaultAdminerModel) Delete(ctx context.Context, id int64) error {
	adminerIdKey := fmt.Sprintf("%s%v", cacheAdminerIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, adminerIdKey)
	return err
}

func (m *defaultAdminerModel) FindOne(ctx context.Context, id int64) (*Adminer, error) {
	adminerIdKey := fmt.Sprintf("%s%v", cacheAdminerIdPrefix, id)
	var resp Adminer
	err := m.QueryRowCtx(ctx, &resp, adminerIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", adminerRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAdminerModel) Insert(ctx context.Context, data *Adminer) (sql.Result, error) {
	adminerIdKey := fmt.Sprintf("%s%v", cacheAdminerIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, adminerRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Uuid, data.Name, data.Avatar, data.Access, data.Passport, data.Password, data.Email, data.Status, data.IsSuperAdmin, data.CompanyId, data.ProjectId, data.LoginCount, data.LastLoginAt, data.IsDeleted)
	}, adminerIdKey)
	return ret, err
}

func (m *defaultAdminerModel) Update(ctx context.Context, data *Adminer) error {
	adminerIdKey := fmt.Sprintf("%s%v", cacheAdminerIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, adminerRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Uuid, data.Name, data.Avatar, data.Access, data.Passport, data.Password, data.Email, data.Status, data.IsSuperAdmin, data.CompanyId, data.ProjectId, data.LoginCount, data.LastLoginAt, data.IsDeleted, data.Id)
	}, adminerIdKey)
	return err
}

func (m *defaultAdminerModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheAdminerIdPrefix, primary)
}

func (m *defaultAdminerModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", adminerRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAdminerModel) tableName() string {
	return m.table
}
