// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	jwtBlacklistFieldNames          = builder.RawFieldNames(&JwtBlacklist{})
	jwtBlacklistRows                = strings.Join(jwtBlacklistFieldNames, ",")
	jwtBlacklistRowsExpectAutoSet   = strings.Join(stringx.Remove(jwtBlacklistFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	jwtBlacklistRowsWithPlaceHolder = strings.Join(stringx.Remove(jwtBlacklistFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	jwtBlacklistModel interface {
		Insert(ctx context.Context, data *JwtBlacklist) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*JwtBlacklist, error)
		Update(ctx context.Context, data *JwtBlacklist) error
		Delete(ctx context.Context, id int64) error
	}

	defaultJwtBlacklistModel struct {
		conn  sqlx.SqlConn
		table string
	}

	JwtBlacklist struct {
		Id        int64     `db:"id"`         // 表主键
		AdminerId int64     `db:"adminer_id"` // 管理员表主键
		Uuid      string    `db:"uuid"`       // 用户或者管理员的唯一识别码
		Token     string    `db:"token"`      // jwt-token
		Platform  string    `db:"platform"`   // 绑定平台
		Ip        string    `db:"ip"`         // 绑定ip
		ExpireAt  time.Time `db:"expire_at"`  // 过期时间
		CreateAt  time.Time `db:"create_at"`  // 创建时间
		UpdateAt  time.Time `db:"update_at"`  // 更新时间
	}
)

func newJwtBlacklistModel(conn sqlx.SqlConn) *defaultJwtBlacklistModel {
	return &defaultJwtBlacklistModel{
		conn:  conn,
		table: "`jwt_blacklist`",
	}
}

func (m *defaultJwtBlacklistModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultJwtBlacklistModel) FindOne(ctx context.Context, id int64) (*JwtBlacklist, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", jwtBlacklistRows, m.table)
	var resp JwtBlacklist
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultJwtBlacklistModel) Insert(ctx context.Context, data *JwtBlacklist) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, jwtBlacklistRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.AdminerId, data.Uuid, data.Token, data.Platform, data.Ip, data.ExpireAt)
	return ret, err
}

func (m *defaultJwtBlacklistModel) Update(ctx context.Context, data *JwtBlacklist) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, jwtBlacklistRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.AdminerId, data.Uuid, data.Token, data.Platform, data.Ip, data.ExpireAt, data.Id)
	return err
}

func (m *defaultJwtBlacklistModel) tableName() string {
	return m.table
}
