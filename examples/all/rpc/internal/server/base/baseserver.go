// Code generated by goctl. DO NOT EDIT.
// Source: admin.proto

package server

import (
	"context"

	"github.com/licat233/genzero/examples/all/rpc/admin_pb"
	"github.com/licat233/genzero/examples/all/rpc/internal/logic/base"
	"github.com/licat233/genzero/examples/all/rpc/internal/svc"
)

type BaseServer struct {
	svcCtx *svc.ServiceContext
	admin_pb.UnimplementedBaseServer
}

func NewBaseServer(svcCtx *svc.ServiceContext) *BaseServer {
	return &BaseServer{
		svcCtx: svcCtx,
	}
}

// 添加管理员
func (s *BaseServer) BaseAddAdminer(ctx context.Context, in *admin_pb.AddAdminerReq) (*admin_pb.AddAdminerResp, error) {
	l := baselogic.NewBaseAddAdminerLogic(ctx, s.svcCtx)
	return l.BaseAddAdminer(in)
}

// 更新管理员
func (s *BaseServer) BasePutAdminer(ctx context.Context, in *admin_pb.PutAdminerReq) (*admin_pb.PutAdminerResp, error) {
	l := baselogic.NewBasePutAdminerLogic(ctx, s.svcCtx)
	return l.BasePutAdminer(in)
}

// 获取管理员
func (s *BaseServer) BaseGetAdminer(ctx context.Context, in *admin_pb.GetAdminerReq) (*admin_pb.GetAdminerResp, error) {
	l := baselogic.NewBaseGetAdminerLogic(ctx, s.svcCtx)
	return l.BaseGetAdminer(in)
}

// 删除管理员
func (s *BaseServer) BaseDelAdminer(ctx context.Context, in *admin_pb.DelAdminerReq) (*admin_pb.DelAdminerResp, error) {
	l := baselogic.NewBaseDelAdminerLogic(ctx, s.svcCtx)
	return l.BaseDelAdminer(in)
}

// 获取管理员列表
func (s *BaseServer) BaseGetAdminerList(ctx context.Context, in *admin_pb.GetAdminerListReq) (*admin_pb.GetAdminerListResp, error) {
	l := baselogic.NewBaseGetAdminerListLogic(ctx, s.svcCtx)
	return l.BaseGetAdminerList(in)
}

// 获取管理员枚举列表
func (s *BaseServer) BaseGetAdminerEnums(ctx context.Context, in *admin_pb.GetAdminerEnumsReq) (*admin_pb.Enums, error) {
	l := baselogic.NewBaseGetAdminerEnumsLogic(ctx, s.svcCtx)
	return l.BaseGetAdminerEnums(in)
}

// 添加jwt黑名单
func (s *BaseServer) BaseAddJwtBlacklist(ctx context.Context, in *admin_pb.AddJwtBlacklistReq) (*admin_pb.AddJwtBlacklistResp, error) {
	l := baselogic.NewBaseAddJwtBlacklistLogic(ctx, s.svcCtx)
	return l.BaseAddJwtBlacklist(in)
}

// 更新jwt黑名单
func (s *BaseServer) BasePutJwtBlacklist(ctx context.Context, in *admin_pb.PutJwtBlacklistReq) (*admin_pb.PutJwtBlacklistResp, error) {
	l := baselogic.NewBasePutJwtBlacklistLogic(ctx, s.svcCtx)
	return l.BasePutJwtBlacklist(in)
}

// 获取jwt黑名单
func (s *BaseServer) BaseGetJwtBlacklist(ctx context.Context, in *admin_pb.GetJwtBlacklistReq) (*admin_pb.GetJwtBlacklistResp, error) {
	l := baselogic.NewBaseGetJwtBlacklistLogic(ctx, s.svcCtx)
	return l.BaseGetJwtBlacklist(in)
}

// 删除jwt黑名单
func (s *BaseServer) BaseDelJwtBlacklist(ctx context.Context, in *admin_pb.DelJwtBlacklistReq) (*admin_pb.DelJwtBlacklistResp, error) {
	l := baselogic.NewBaseDelJwtBlacklistLogic(ctx, s.svcCtx)
	return l.BaseDelJwtBlacklist(in)
}

// 获取jwt黑名单列表
func (s *BaseServer) BaseGetJwtBlacklistList(ctx context.Context, in *admin_pb.GetJwtBlacklistListReq) (*admin_pb.GetJwtBlacklistListResp, error) {
	l := baselogic.NewBaseGetJwtBlacklistListLogic(ctx, s.svcCtx)
	return l.BaseGetJwtBlacklistList(in)
}

// 获取jwt黑名单枚举列表
func (s *BaseServer) BaseGetJwtBlacklistEnums(ctx context.Context, in *admin_pb.GetJwtBlacklistEnumsReq) (*admin_pb.Enums, error) {
	l := baselogic.NewBaseGetJwtBlacklistEnumsLogic(ctx, s.svcCtx)
	return l.BaseGetJwtBlacklistEnums(in)
}
