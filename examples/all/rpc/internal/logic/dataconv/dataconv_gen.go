// Code generated by genzero. DO NOT EDIT.
package dataconv

import (
	"database/sql"
	"time"

	"github.com/licat233/genzero/examples/all/model"
	"github.com/licat233/genzero/examples/all/rpc/admin_pb"
)

func PbAdminerToMdAdminer(pb *admin_pb.Adminer) *model.Adminer {
	if pb == nil {
		return nil
	}
	return &model.Adminer{
		Id:           pb.Id,
		Uuid:         pb.Uuid,
		Name:         pb.Name,
		Avatar:       pb.Avatar,
		Passport:     pb.Passport,
		Password:     pb.Password,
		Email:        pb.Email,
		Resume:       sql.NullString{Valid: true, String: pb.Resume},
		Status:       pb.Status,
		IsSuperAdmin: pb.IsSuperAdmin,
		LoginCount:   pb.LoginCount,
		LastLogin:    time.Unix(pb.LastLogin, 0).Local(),
	}
}

func MdAdminerToPbAdminer(md *model.Adminer) *admin_pb.Adminer {
	if md == nil {
		return nil
	}
	return &admin_pb.Adminer{
		Id:           md.Id,
		Uuid:         md.Uuid,
		Name:         md.Name,
		Avatar:       md.Avatar,
		Passport:     md.Passport,
		Password:     md.Password,
		Email:        md.Email,
		Resume:       md.Resume.String,
		Status:       md.Status,
		IsSuperAdmin: md.IsSuperAdmin,
		LoginCount:   md.LoginCount,
		LastLogin:    md.LastLogin.Unix(),
	}
}

func PbAdminers2MdAdminers(pbList []*admin_pb.Adminer) []*model.Adminer {
	if pbList == nil {
		return nil
	}
	data := make([]*model.Adminer, 0)
	for _, v := range pbList {
		data = append(data, PbAdminerToMdAdminer(v))
	}
	return data
}

func MdAdminers2PbAdminers(mdList []*model.Adminer) []*admin_pb.Adminer {
	if mdList == nil {
		return nil
	}
	data := make([]*admin_pb.Adminer, 0)
	for _, v := range mdList {
		data = append(data, MdAdminerToPbAdminer(v))
	}
	return data
}

func PbJwtBlacklistToMdJwtBlacklist(pb *admin_pb.JwtBlacklist) *model.JwtBlacklist {
	if pb == nil {
		return nil
	}
	return &model.JwtBlacklist{
		Id:        pb.Id,
		AdminerId: pb.AdminerId,
		Uuid:      pb.Uuid,
		Token:     pb.Token,
		Platform:  pb.Platform,
		Ip:        pb.Ip,
		ExpireAt:  time.Unix(pb.ExpireAt, 0).Local(),
	}
}

func MdJwtBlacklistToPbJwtBlacklist(md *model.JwtBlacklist) *admin_pb.JwtBlacklist {
	if md == nil {
		return nil
	}
	return &admin_pb.JwtBlacklist{
		Id:        md.Id,
		AdminerId: md.AdminerId,
		Uuid:      md.Uuid,
		Token:     md.Token,
		Platform:  md.Platform,
		Ip:        md.Ip,
		ExpireAt:  md.ExpireAt.Unix(),
	}
}

func PbJwtBlacklists2MdJwtBlacklists(pbList []*admin_pb.JwtBlacklist) []*model.JwtBlacklist {
	if pbList == nil {
		return nil
	}
	data := make([]*model.JwtBlacklist, 0)
	for _, v := range pbList {
		data = append(data, PbJwtBlacklistToMdJwtBlacklist(v))
	}
	return data
}

func MdJwtBlacklists2PbJwtBlacklists(mdList []*model.JwtBlacklist) []*admin_pb.JwtBlacklist {
	if mdList == nil {
		return nil
	}
	data := make([]*admin_pb.JwtBlacklist, 0)
	for _, v := range mdList {
		data = append(data, MdJwtBlacklistToPbJwtBlacklist(v))
	}
	return data
}

func ListReqParams(req *admin_pb.ListReq) (pageSize int64, page int64, keyword string) {
	if req != nil {
		pageSize = req.PageSize
		page = req.Page
		keyword = req.Keyword
	}
	return
}
