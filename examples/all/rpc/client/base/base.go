// Code generated by goctl. DO NOT EDIT.
// Source: admin.proto

package base

import (
	"context"

	"github.com/licat233/genzero/examples/all/rpc/admin_pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddAdminerReq           = admin_pb.AddAdminerReq
	AddAdminerResp          = admin_pb.AddAdminerResp
	AddJwtBlacklistReq      = admin_pb.AddJwtBlacklistReq
	AddJwtBlacklistResp     = admin_pb.AddJwtBlacklistResp
	Adminer                 = admin_pb.Adminer
	ByIdReq                 = admin_pb.ByIdReq
	DelAdminerReq           = admin_pb.DelAdminerReq
	DelAdminerResp          = admin_pb.DelAdminerResp
	DelJwtBlacklistReq      = admin_pb.DelJwtBlacklistReq
	DelJwtBlacklistResp     = admin_pb.DelJwtBlacklistResp
	Enum                    = admin_pb.Enum
	Enums                   = admin_pb.Enums
	GetAdminerEnumsReq      = admin_pb.GetAdminerEnumsReq
	GetAdminerListReq       = admin_pb.GetAdminerListReq
	GetAdminerListResp      = admin_pb.GetAdminerListResp
	GetAdminerReq           = admin_pb.GetAdminerReq
	GetAdminerResp          = admin_pb.GetAdminerResp
	GetJwtBlacklistEnumsReq = admin_pb.GetJwtBlacklistEnumsReq
	GetJwtBlacklistListReq  = admin_pb.GetJwtBlacklistListReq
	GetJwtBlacklistListResp = admin_pb.GetJwtBlacklistListResp
	GetJwtBlacklistReq      = admin_pb.GetJwtBlacklistReq
	GetJwtBlacklistResp     = admin_pb.GetJwtBlacklistResp
	JwtBlacklist            = admin_pb.JwtBlacklist
	ListReq                 = admin_pb.ListReq
	NilReq                  = admin_pb.NilReq
	NilResp                 = admin_pb.NilResp
	Option                  = admin_pb.Option
	Options                 = admin_pb.Options
	PutAdminerReq           = admin_pb.PutAdminerReq
	PutAdminerResp          = admin_pb.PutAdminerResp
	PutJwtBlacklistReq      = admin_pb.PutJwtBlacklistReq
	PutJwtBlacklistResp     = admin_pb.PutJwtBlacklistResp
	StatusResp              = admin_pb.StatusResp
	TreeOption              = admin_pb.TreeOption
	TreeOptions             = admin_pb.TreeOptions

	Base interface {
		// 添加管理员
		AddAdminer(ctx context.Context, in *AddAdminerReq, opts ...grpc.CallOption) (*AddAdminerResp, error)
		// 更新管理员
		PutAdminer(ctx context.Context, in *PutAdminerReq, opts ...grpc.CallOption) (*PutAdminerResp, error)
		// 获取管理员
		GetAdminer(ctx context.Context, in *GetAdminerReq, opts ...grpc.CallOption) (*GetAdminerResp, error)
		// 删除管理员
		DelAdminer(ctx context.Context, in *DelAdminerReq, opts ...grpc.CallOption) (*DelAdminerResp, error)
		// 获取管理员列表
		GetAdminerList(ctx context.Context, in *GetAdminerListReq, opts ...grpc.CallOption) (*GetAdminerListResp, error)
		// 获取管理员枚举列表
		GetAdminerEnums(ctx context.Context, in *GetAdminerEnumsReq, opts ...grpc.CallOption) (*Enums, error)
		// 添加jwt黑名单
		AddJwtBlacklist(ctx context.Context, in *AddJwtBlacklistReq, opts ...grpc.CallOption) (*AddJwtBlacklistResp, error)
		// 更新jwt黑名单
		PutJwtBlacklist(ctx context.Context, in *PutJwtBlacklistReq, opts ...grpc.CallOption) (*PutJwtBlacklistResp, error)
		// 获取jwt黑名单
		GetJwtBlacklist(ctx context.Context, in *GetJwtBlacklistReq, opts ...grpc.CallOption) (*GetJwtBlacklistResp, error)
		// 删除jwt黑名单
		DelJwtBlacklist(ctx context.Context, in *DelJwtBlacklistReq, opts ...grpc.CallOption) (*DelJwtBlacklistResp, error)
		// 获取jwt黑名单列表
		GetJwtBlacklistList(ctx context.Context, in *GetJwtBlacklistListReq, opts ...grpc.CallOption) (*GetJwtBlacklistListResp, error)
		// 获取jwt黑名单枚举列表
		GetJwtBlacklistEnums(ctx context.Context, in *GetJwtBlacklistEnumsReq, opts ...grpc.CallOption) (*Enums, error)
	}

	defaultBase struct {
		cli zrpc.Client
	}
)

func NewBase(cli zrpc.Client) Base {
	return &defaultBase{
		cli: cli,
	}
}

// 添加管理员
func (m *defaultBase) AddAdminer(ctx context.Context, in *AddAdminerReq, opts ...grpc.CallOption) (*AddAdminerResp, error) {
	client := admin_pb.NewBaseClient(m.cli.Conn())
	return client.AddAdminer(ctx, in, opts...)
}

// 更新管理员
func (m *defaultBase) PutAdminer(ctx context.Context, in *PutAdminerReq, opts ...grpc.CallOption) (*PutAdminerResp, error) {
	client := admin_pb.NewBaseClient(m.cli.Conn())
	return client.PutAdminer(ctx, in, opts...)
}

// 获取管理员
func (m *defaultBase) GetAdminer(ctx context.Context, in *GetAdminerReq, opts ...grpc.CallOption) (*GetAdminerResp, error) {
	client := admin_pb.NewBaseClient(m.cli.Conn())
	return client.GetAdminer(ctx, in, opts...)
}

// 删除管理员
func (m *defaultBase) DelAdminer(ctx context.Context, in *DelAdminerReq, opts ...grpc.CallOption) (*DelAdminerResp, error) {
	client := admin_pb.NewBaseClient(m.cli.Conn())
	return client.DelAdminer(ctx, in, opts...)
}

// 获取管理员列表
func (m *defaultBase) GetAdminerList(ctx context.Context, in *GetAdminerListReq, opts ...grpc.CallOption) (*GetAdminerListResp, error) {
	client := admin_pb.NewBaseClient(m.cli.Conn())
	return client.GetAdminerList(ctx, in, opts...)
}

// 获取管理员枚举列表
func (m *defaultBase) GetAdminerEnums(ctx context.Context, in *GetAdminerEnumsReq, opts ...grpc.CallOption) (*Enums, error) {
	client := admin_pb.NewBaseClient(m.cli.Conn())
	return client.GetAdminerEnums(ctx, in, opts...)
}

// 添加jwt黑名单
func (m *defaultBase) AddJwtBlacklist(ctx context.Context, in *AddJwtBlacklistReq, opts ...grpc.CallOption) (*AddJwtBlacklistResp, error) {
	client := admin_pb.NewBaseClient(m.cli.Conn())
	return client.AddJwtBlacklist(ctx, in, opts...)
}

// 更新jwt黑名单
func (m *defaultBase) PutJwtBlacklist(ctx context.Context, in *PutJwtBlacklistReq, opts ...grpc.CallOption) (*PutJwtBlacklistResp, error) {
	client := admin_pb.NewBaseClient(m.cli.Conn())
	return client.PutJwtBlacklist(ctx, in, opts...)
}

// 获取jwt黑名单
func (m *defaultBase) GetJwtBlacklist(ctx context.Context, in *GetJwtBlacklistReq, opts ...grpc.CallOption) (*GetJwtBlacklistResp, error) {
	client := admin_pb.NewBaseClient(m.cli.Conn())
	return client.GetJwtBlacklist(ctx, in, opts...)
}

// 删除jwt黑名单
func (m *defaultBase) DelJwtBlacklist(ctx context.Context, in *DelJwtBlacklistReq, opts ...grpc.CallOption) (*DelJwtBlacklistResp, error) {
	client := admin_pb.NewBaseClient(m.cli.Conn())
	return client.DelJwtBlacklist(ctx, in, opts...)
}

// 获取jwt黑名单列表
func (m *defaultBase) GetJwtBlacklistList(ctx context.Context, in *GetJwtBlacklistListReq, opts ...grpc.CallOption) (*GetJwtBlacklistListResp, error) {
	client := admin_pb.NewBaseClient(m.cli.Conn())
	return client.GetJwtBlacklistList(ctx, in, opts...)
}

// 获取jwt黑名单枚举列表
func (m *defaultBase) GetJwtBlacklistEnums(ctx context.Context, in *GetJwtBlacklistEnumsReq, opts ...grpc.CallOption) (*Enums, error) {
	client := admin_pb.NewBaseClient(m.cli.Conn())
	return client.GetJwtBlacklistEnums(ctx, in, opts...)
}
