// Code generated by goctl. DO NOT EDIT.
package types

type Enum struct {
	Label interface{} `json:"label"` //名
	Value interface{} `json:"value"` //值
}

type Enums struct {
	List []Enum `json:"list"` //枚举列表数据
}

type Option struct {
	Title string `json:"title"` //名
	Value int64  `json:"value"` //值
}

type Options struct {
	List []Option `json:"list"` //选项列表数据
}

type TreeOption struct {
	Title    string       `json:"title"`             //名
	Value    int64        `json:"value"`             //值
	Children []TreeOption `json:"children,optional"` //子集
}

type TreeOptions struct {
	List []TreeOption `json:"list"` //树形选项列表数据
}

type JwtToken struct {
	AccessToken  string `json:"access_token"`  //token
	AccessExpire int64  `json:"access_expire"` //expire
	RefreshAfter int64  `json:"refresh_after"` //refresh at
}

type ListReq struct {
	PageSize int64  `json:"page_size,optional,default=20"` //页面容量，默认20，可选
	Page     int64  `json:"page,optional,default=1"`       //当前页码，默认1，可选
	Current  int64  `json:"current,optional,default=1"`    //当前页码，默认1，用于对接umijs，可选
	Keyword  string `json:"keyword,optional"`              //关键词，可选
}

type ByIdReq struct {
	Id int64 `form:"id"` //主键
}

type NilReq struct {
}

type NilResp struct {
}

type Resp struct {
	Body interface{} `json:"body"` //响应数据
}

type CaptchaResp struct {
	CaptchaId string `json:"captcha_id"` //captcha id
	ExpiresAt int64  `json:"expires_at"` //expires time
}

type BaseResp struct {
	Status       bool        `json:"status"`                           //响应状态
	Success      bool        `json:"success"`                          //响应状态，用于对接umijs
	Message      string      `json:"message,optional,omitempty"`       //给予的提示信息
	Data         interface{} `json:"data,optional,omitempty"`          //【选填】响应的业务数据
	Total        int64       `json:"total,optional,omitempty"`         //【选填】数据总个数
	PageSize     int64       `json:"page_size,optional,omitempty"`     //【选填】单页数量
	Current      int64       `json:"current,optional,omitempty"`       //【选填】当前页码，用于对接umijs
	Page         int64       `json:"page,optional,omitempty"`          //【选填】当前页码
	TotalPage    int64       `json:"total_page,optional,omitempty"`    //【选填】自增项，总共有多少页，根据前端的pageSize来计算
	ErrorCode    int64       `json:"error_code,optional,omitempty"`    //【选填】错误类型代码：400错误请求，401未授权，500服务器内部错误，200成功
	ErrorMessage string      `json:"error_message,optional,omitempty"` //【选填】向用户显示消息
	TraceMessage string      `json:"trace_message,optional,omitempty"` //【选填】调试错误信息，请勿在生产环境下使用，可有可无
	ShowType     int64       `json:"show_type,optional,omitempty"`     //【选填】错误显示类型：0.不提示错误;1.警告信息提示；2.错误信息提示；4.通知提示；9.页面跳转
	TraceId      string      `json:"trace_id,optional,omitempty"`      //【选填】方便后端故障排除：唯一的请求ID
	Host         string      `json:"host,optional,omitempty"`          //【选填】方便后端故障排除：当前访问服务器的主机
}

type Adminer struct {
	Id           int64  `json:"id"`             //表主键
	Uuid         string `json:"uuid"`           //唯一识别码
	Name         string `json:"name"`           //管理员名称
	Avatar       string `json:"avatar"`         //头像
	Passport     string `json:"passport"`       //账号
	Password     string `json:"password"`       //密码
	Email        string `json:"email"`          //邮箱
	Status       int64  `json:"status"`         //账号状态，是否可用
	IsSuperAdmin int64  `json:"is_super_admin"` //是否为超级管理员
	LoginCount   int64  `json:"login_count"`    //登录次数
	LastLogin    int64  `json:"last_login"`     //最后一次登录时间
}

type AddAdminerReq struct {
	Id           int64  `json:"id"`             //表主键
	Uuid         string `json:"uuid"`           //唯一识别码
	Name         string `json:"name"`           //管理员名称
	Avatar       string `json:"avatar"`         //头像
	Passport     string `json:"passport"`       //账号
	Password     string `json:"password"`       //密码
	Email        string `json:"email"`          //邮箱
	Status       int64  `json:"status"`         //账号状态，是否可用
	IsSuperAdmin int64  `json:"is_super_admin"` //是否为超级管理员
	LoginCount   int64  `json:"login_count"`    //登录次数
	LastLogin    int64  `json:"last_login"`     //最后一次登录时间
}

type PutAdminerReq struct {
	Id           int64  `json:"id"`             //表主键
	Uuid         string `json:"uuid"`           //唯一识别码
	Name         string `json:"name"`           //管理员名称
	Avatar       string `json:"avatar"`         //头像
	Passport     string `json:"passport"`       //账号
	Password     string `json:"password"`       //密码
	Email        string `json:"email"`          //邮箱
	Status       int64  `json:"status"`         //账号状态，是否可用
	IsSuperAdmin int64  `json:"is_super_admin"` //是否为超级管理员
	LoginCount   int64  `json:"login_count"`    //登录次数
	LastLogin    int64  `json:"last_login"`     //最后一次登录时间
}

type DelAdminerReq struct {
	Id int64 `json:"id"` //管理员 ID
}

type GetAdminerReq struct {
	Id int64 `form:"id"` //管理员 ID
}

type GetAdminerListReq struct {
	PageSize     int64  `json:"page_size,optional,default=20"` //页面容量，默认20，可选
	Page         int64  `json:"page,optional,default=1"`       //当前页码，默认1，可选
	Current      int64  `json:"current,optional,default=1"`    //当前页码，默认1，用于对接umijs，可选
	Keyword      string `json:"keyword,optional"`              //关键词，可选
	Id           int64  `json:"id"`                            //表主键
	Uuid         string `json:"uuid"`                          //唯一识别码
	Name         string `json:"name"`                          //管理员名称
	Avatar       string `json:"avatar"`                        //头像
	Passport     string `json:"passport"`                      //账号
	Password     string `json:"password"`                      //密码
	Email        string `json:"email"`                         //邮箱
	Status       int64  `json:"status"`                        //账号状态，是否可用
	IsSuperAdmin int64  `json:"is_super_admin"`                //是否为超级管理员
	LoginCount   int64  `json:"login_count"`                   //登录次数
	LastLogin    int64  `json:"last_login"`                    //最后一次登录时间
}

type GetAdminerEnumsReq struct {
	ParentId int64 `form:"parent_id,optional,default=-1"` //父级ID
}
