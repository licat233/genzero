/**
* author: licat
* desc: Generated by genzero@v1.1.3-bate.2 (https://github.com/licat233/genzero)
*/

syntax = "proto3";

package admin_proto;

// ------------------------------ Import Start ------------------------------

// The content in this block will not be updated
// 此区块内的内容不会被更新
//[custom import start]

//[custom import end]

// ------------------------------ Import End ------------------------------

option go_package="./admin_pb";

// ------------------------------ Enum Start ------------------------------

// The content in this block will not be updated
// 此区块内的内容不会被更新
//[custom enum start]

//[custom enum end]

// ------------------------------ Enum End ------------------------------

// ------------------------------ Message Start ------------------------------

//--------- base message start---------

//枚举
message Enum {
  string label = 1; //标签
  int64 value = 2; //值
}

//枚举列表
message Enums {
  repeated Enum enums = 1; //枚举列表数据
}

//选项
message Option {
  string title = 1; //标题
  int64 value = 2; //值
}

//选项列表
message Options {
  repeated Option options = 1; //选项列表数据
}

//树形选项
message TreeOption {
  string title = 1; //标题
  int64 value = 2; //值
  repeated TreeOption children = 3; //子集
}

//树形选项列表
message TreeOptions {
  repeated TreeOption tree_options = 1; //树形选项列表数据
}

//状态响应
message StatusResp {
  bool status = 1; //状态
}

//列表数据请求
message ListReq {
  int64 page_size = 1; //页容量
  int64 page = 2; //页码
  string keyword = 3; //关键词
}

//通过ID请求
message ByIdReq {
  int64 id = 1; //主键
}

//空请求
message NilReq {
}

//空响应
message NilResp {
}

//--------- base message end---------

//添加管理员请求
message AddAdminerReq {
  string name = 1; //管理员名称
  string avatar = 2; //头像
  string passport = 3; //账号
  string password = 4; //密码
  string email = 5; //邮箱
  int64 status = 6; //账号状态，是否可用
  int64 is_super_admin = 7; //是否为超级管理员
  int64 login_count = 8; //登录次数
  int64 last_login = 9; //最后一次登录时间
}

//添加管理员响应
message AddAdminerResp {
}

//添加jwt黑名单请求
message AddJwtBlacklistReq {
  int64 adminer_id = 1; //管理员表主键
  string token = 2; //jwt-token
  string platform = 3; //绑定平台
  string ip = 4; //绑定ip
  int64 expire_at = 5; //过期时间
}

//添加jwt黑名单响应
message AddJwtBlacklistResp {
}

//管理员
message Adminer {
  int64 id = 1; //表主键
  string uuid = 2; //唯一识别码
  string name = 3; //管理员名称
  string avatar = 4; //头像
  string passport = 5; //账号
  string password = 6; //密码
  string email = 7; //邮箱
  int64 status = 8; //账号状态，是否可用
  int64 is_super_admin = 9; //是否为超级管理员
  int64 login_count = 10; //登录次数
  int64 last_login = 11; //最后一次登录时间
}

//删除管理员请求
message DelAdminerReq {
  int64 id = 1; //管理员 ID
}

//删除管理员响应
message DelAdminerResp {
}

//删除jwt黑名单请求
message DelJwtBlacklistReq {
  int64 id = 1; //jwt黑名单 ID
}

//删除jwt黑名单响应
message DelJwtBlacklistResp {
}

//获取管理员枚举请求
message GetAdminerEnumsReq {
  int64 parent_id = 1; //父级ID
}

//获取管理员列表请求
message GetAdminerListReq {
  ListReq list_req = 1; //列表页码参数
  Adminer adminer = 2; //管理员参数
}

//获取管理员列表响应
message GetAdminerListResp {
  repeated Adminer adminers = 1; //管理员列表
  int64 total = 2; //管理员总数量
}

//获取管理员请求
message GetAdminerReq {
  int64 id = 1; //管理员 ID
}

//获取管理员响应
message GetAdminerResp {
  Adminer adminer = 1; //管理员 信息
}

//获取jwt黑名单枚举请求
message GetJwtBlacklistEnumsReq {
  int64 parent_id = 1; //父级ID
}

//获取jwt黑名单列表请求
message GetJwtBlacklistListReq {
  ListReq list_req = 1; //列表页码参数
  JwtBlacklist jwt_blacklist = 2; //jwt黑名单参数
}

//获取jwt黑名单列表响应
message GetJwtBlacklistListResp {
  repeated JwtBlacklist jwt_blacklists = 1; //jwt黑名单列表
  int64 total = 2; //jwt黑名单总数量
}

//获取jwt黑名单请求
message GetJwtBlacklistReq {
  int64 id = 1; //jwt黑名单 ID
}

//获取jwt黑名单响应
message GetJwtBlacklistResp {
  JwtBlacklist jwt_blacklist = 1; //jwt黑名单 信息
}

//jwt黑名单
message JwtBlacklist {
  int64 id = 1; //表主键
  int64 adminer_id = 2; //管理员表主键
  string uuid = 3; //用户或者管理员的唯一识别码
  string token = 4; //jwt-token
  string platform = 5; //绑定平台
  string ip = 6; //绑定ip
  int64 expire_at = 7; //过期时间
}

//更新管理员请求
message PutAdminerReq {
  int64 id = 1; //表主键
  string uuid = 2; //唯一识别码
  string name = 3; //管理员名称
  string avatar = 4; //头像
  string passport = 5; //账号
  string password = 6; //密码
  string email = 7; //邮箱
  int64 status = 8; //账号状态，是否可用
  int64 is_super_admin = 9; //是否为超级管理员
  int64 login_count = 10; //登录次数
  int64 last_login = 11; //最后一次登录时间
}

//更新管理员响应
message PutAdminerResp {
}

//更新jwt黑名单请求
message PutJwtBlacklistReq {
  int64 id = 1; //表主键
  int64 adminer_id = 2; //管理员表主键
  string uuid = 3; //用户或者管理员的唯一识别码
  string token = 4; //jwt-token
  string platform = 5; //绑定平台
  string ip = 6; //绑定ip
  int64 expire_at = 7; //过期时间
}

//更新jwt黑名单响应
message PutJwtBlacklistResp {
}

// The content in this block will not be updated
// 此区块内的内容不会被更新
//[custom message start]

//[custom message end]

// ------------------------------ Message End ------------------------------

// ------------------------------ Service Start ------------------------------

service Base {

  // Adminer rpc

  //添加管理员
  rpc AddAdminer(AddAdminerReq) returns (AddAdminerResp);
  //更新管理员
  rpc PutAdminer(PutAdminerReq) returns (PutAdminerResp);
  //获取管理员
  rpc GetAdminer(GetAdminerReq) returns (GetAdminerResp);
  //删除管理员
  rpc DelAdminer(DelAdminerReq) returns (DelAdminerResp);
  //获取管理员列表
  rpc GetAdminerList(GetAdminerListReq) returns (GetAdminerListResp);
  //获取管理员枚举列表
  rpc GetAdminerEnums(GetAdminerEnumsReq) returns (Enums);

  // JwtBlacklist rpc

  //添加jwt黑名单
  rpc AddJwtBlacklist(AddJwtBlacklistReq) returns (AddJwtBlacklistResp);
  //更新jwt黑名单
  rpc PutJwtBlacklist(PutJwtBlacklistReq) returns (PutJwtBlacklistResp);
  //获取jwt黑名单
  rpc GetJwtBlacklist(GetJwtBlacklistReq) returns (GetJwtBlacklistResp);
  //删除jwt黑名单
  rpc DelJwtBlacklist(DelJwtBlacklistReq) returns (DelJwtBlacklistResp);
  //获取jwt黑名单列表
  rpc GetJwtBlacklistList(GetJwtBlacklistListReq) returns (GetJwtBlacklistListResp);
  //获取jwt黑名单枚举列表
  rpc GetJwtBlacklistEnums(GetJwtBlacklistEnumsReq) returns (Enums);

}

service Admin {

  // The content in this block will not be updated
  // 此区块内的内容不会被更新
  //[custom service start]

  //Preset methods can be deleted. At least one method needs to be defined in a service
  //预置的方法，可以删除，一个 service 中至少需要定义一个 method
  rpc Test(NilReq) returns (NilResp);

  //[custom service end]

}

// ------------------------------ Service End ------------------------------